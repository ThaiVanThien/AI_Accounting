import 'package:google_generative_ai/google_generative_ai.dart';
import 'dart:convert';
import 'package:intl/intl.dart';
import '../models/finance_record.dart';
import '../models/chat_message.dart';
import '../models/product.dart';
import '../models/order.dart';
import '../models/customer.dart';
import '../utils/format_utils.dart';
import 'storage_manager.dart';
import 'product_service.dart';
import 'customer_service.dart';
import 'order_service.dart';

class AIService {
  // API Keys t·ª´ Python.py
  final List<String> _apiKeys = [
    "AIzaSyBEfaLoEVOYc2Tft0m63Ae8HuxwaF8pCdA",
    "AIzaSyDmoMtVlGQqKQ8D1fHOxuP5ZBdEQvAgyO4",
    "AIzaSyBCSfatIlev3xZN9MrQlIhSu_dYrxoaExY"
  ];
  int _currentApiKeyIndex = 0;
  
  final StorageManager _storageManager = StorageManager();
  final ProductService _productService = ProductService();
  final CustomerService _customerService = CustomerService();
  final OrderService _orderService = OrderService();

  // Kh·ªüi t·∫°o c√°c service
  Future<void> init() async {
    await _productService.init();
    await _customerService.init();
    await _orderService.init();
  }

  String _getPromptTypeInput(String userInput) {
    final now = DateTime.now();
    return '''B·∫°n l√† AI chuy√™n x·ª≠ l√Ω d·ªØ li·ªáu t√†i ch√≠nh Vi·ªát Nam.
    DateTime: $now
    Context: Ng∆∞·ªùi d√πng y√™u c·∫ßu nh·∫≠p ho·∫∑c b√°o c√°o
    Task: H√£y x√°c ƒë·ªãnh ch√≠nh x√°c y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng v√† chuy·ªÉn ƒë·ªïi th√†nh JSON
    
    Examples:
    Input: 'H√¥m nay b√°n ƒë∆∞·ª£c 500k, mua h√†ng h·∫øt 300k'
    Output: {"type_input": "entry"}
    
    Input: 'B√°o c√°o doanh thu qu√Ω 3'
    Output: {"type_input": "report", "report_type": "quy", "period": 3, "year": 2025}
    
    Input: 'B√°o c√°o th√°ng 7'
    Output: {"type_input": "report", "report_type": "thang", "period": 7, "year": 2025}
    
    Input: 'B√°o c√°o nƒÉm 2024'
    Output: {"type_input": "report", "report_type": "nam", "year": 2024}
    
    Input: 'Xem b√°o c√°o h√¥m nay'
    Output: {"type_input": "report", "report_type": "ngay", "date": "${now.toString().split(' ')[0]}"}
    
    Input: 'K·∫ø to√°n l√† g√¨'
    Output: {"type_input": "search"}
    
    Input: 'B√°n 2 chai n∆∞·ªõc su·ªëi, 1 b√°nh m√¨'
    Output: {"type_input": "order"}
    
    Input: 'T·∫°o ƒë∆°n h√†ng 3 b√∫t bi, 5 g√≥i m√¨ t√¥m'
    Output: {"type_input": "order"}
    
    H√£y ph√¢n t√≠ch d·ªØ li·ªáu sau: $userInput''';
  }

  String _getWritePromptText(String userInput) {
    final now = DateTime.now();
    return '''B·∫°n l√† AI chuy√™n x·ª≠ l√Ω d·ªØ li·ªáu t√†i ch√≠nh Vi·ªát Nam.
    Th·ªùi gian hi·ªán t·∫°i: ${now.toString().split(' ')[0]}
    Context: Ng∆∞·ªùi d√πng s·∫Ω n√≥i v·ªÅ doanh thu v√† chi ph√≠ trong ng√†y. N·∫øu ti·ªÅn n·ª£ s·∫Ω t√≠nh v√†o ti·ªÅn chi ph√≠
    Task: Tr√≠ch xu·∫•t ch√≠nh x√°c s·ªë ti·ªÅn v√† chuy·ªÉn ƒë·ªïi th√†nh JSON.
    Examples: Input: 'H√¥m nay b√°n ƒë∆∞·ª£c 500k, mua h√†ng h·∫øt 300k' 
    Output: {"doanh_thu": 500000, "chi_phi": 300000,"ghi_chu": "", "ngay_tao": "2024-01-15"} //Ghi ch√∫: ""
    Input: "Thu v·ªÅ 2 tri·ªáu 5, chi ti√™u 1 tri·ªáu 2"
    Output: {"doanh_thu": 2500000, "chi_phi": 1200000,"ghi_chu": "", "ngay_tao": "2024-01-15"} Response (JSON only) kh√¥ng c√≥ Json data:  //Ghi ch√∫: ""
    N·∫øu d·ªØ li·ªáu kh√¥ng li√™n quan th√¨ tr·∫£ v·ªÅ 'Error'
    H√£y ph√¢n t√≠ch d·ªØ li·ªáu sau: $userInput''';
  }

  String _getOrderPromptText(String userInput, List<Product> availableProducts) {
    final now = DateTime.now();
    final productList = availableProducts.map((p) => 
      '{"name": "${p.name}", "code": "${p.code}", "unit": "${p.unit}", "price": ${p.sellingPrice}}'
    ).join(', ');
    
    return '''B·∫°n l√† AI chuy√™n x·ª≠ l√Ω ƒë∆°n h√†ng b√°n h√†ng Vi·ªát Nam.
    Th·ªùi gian hi·ªán t·∫°i: ${now.toString().split(' ')[0]}
    Danh s√°ch s·∫£n ph·∫©m c√≥ s·∫µn: [$productList]
    
    Context: Ng∆∞·ªùi d√πng m√¥ t·∫£ ƒë∆°n h√†ng b√°n h√†ng. H√£y ph√¢n t√≠ch v√† tr√≠ch xu·∫•t th√¥ng tin s·∫£n ph·∫©m.
    Task: Tr√≠ch xu·∫•t th√¥ng tin s·∫£n ph·∫©m v√† s·ªë l∆∞·ª£ng, kh·ªõp v·ªõi s·∫£n ph·∫©m c√≥ s·∫µn.
    
    Examples:
    Input: 'B√°n 2 chai n∆∞·ªõc su·ªëi Lavie, 1 b√°nh m√¨ sandwich'
    Output: {
      "success": true,
      "items": [
        {"product_name": "N∆∞·ªõc su·ªëi Lavie 500ml", "quantity": 2, "unit": "Chai", "matched": true},
        {"product_name": "B√°nh m√¨ sandwich", "quantity": 1, "unit": "C√°i", "matched": true}
      ],
      "customer_name": "",
      "note": ""
    }
    
    Input: 'Kh√°ch h√†ng Anh Minh mua 5 b√∫t bi, 3 g√≥i m√¨ t√¥m, ghi ch√∫: kh√°ch hang quen thuoc'
    Output: {
      "success": true,
      "items": [
        {"product_name": "B√∫t bi", "quantity": 5, "unit": "C√°i", "matched": false},
        {"product_name": "M√¨ t√¥m", "quantity": 3, "unit": "G√≥i", "matched": false}
      ],
      "customer_name": "Anh Minh",
      "note": "kh√°ch VIP"
    }
    
    N·∫øu kh√¥ng kh·ªõp s·∫£n ph·∫©m th√¨ matched = false, n·∫øu kh·ªõp th√¨ matched = true v√† d√πng t√™n ch√≠nh x√°c t·ª´ danh s√°ch.
    N·∫øu d·ªØ li·ªáu kh√¥ng li√™n quan ƒë·∫øn b√°n h√†ng th√¨ tr·∫£ v·ªÅ {"success": false, "reason": "not_order_related"}
    
    H√£y ph√¢n t√≠ch d·ªØ li·ªáu sau: $userInput''';
  }

  String _cleanJsonText(String text) {
    String cleanJson = text.trim().replaceAll('`', '').replaceAll('\n', '');
    if (cleanJson.startsWith("json")) {
      cleanJson = cleanJson.substring(4);
    }
    return cleanJson;
  }

  Future<String> callGeminiAPI(String prompt) async {
    for (int attempt = 0; attempt < _apiKeys.length; attempt++) {
      try {
        final model = GenerativeModel(
          model: 'gemini-2.5-flash',
          apiKey: _apiKeys[_currentApiKeyIndex],
        );

        final content = [Content.text(prompt)];
        final response = await model.generateContent(content);

        if (response.text != null && response.text!.isNotEmpty) {
          return response.text!;
        } else {
          throw Exception("Empty response from API");
        }
      } catch (e) {
        print('L·ªói API key ${_currentApiKeyIndex + 1}: $e');
        _currentApiKeyIndex = (_currentApiKeyIndex + 1) % _apiKeys.length;
        if (attempt == _apiKeys.length - 1) {
          throw Exception("ƒê√£ th·ª≠ h·∫øt t·∫•t c·∫£ API keys nh∆∞ng v·∫´n l·ªói: $e");
        }
      }
    }
    throw Exception("Kh√¥ng th·ªÉ g·ªçi API");
  }

  Future<Map<String, dynamic>> analyzeUserInput(String userInput) async {
    final typeResponse = await callGeminiAPI(_getPromptTypeInput(userInput));
    final cleanTypeJson = _cleanJsonText(typeResponse);
    return jsonDecode(cleanTypeJson);
  }

  Future<FinanceRecord?> extractFinanceData(String userInput) async {
    final entryResponse = await callGeminiAPI(_getWritePromptText(userInput));
    final cleanEntryJson = _cleanJsonText(entryResponse);
    
    if (cleanEntryJson == "Error") {
      return null;
    }
    
    final data = jsonDecode(cleanEntryJson);
    return FinanceRecord(
      id: 0,
      doanhThu: (data["doanh_thu"] ?? 0).toDouble(),
      chiPhi: (data["chi_phi"] ?? 0).toDouble(),
      ghiChu: data["ghi_chu"] ?? "",
      ngayTao: DateTime.parse(data["ngay_tao"]),
    );
  }

  Future<Map<String, dynamic>?> extractOrderData(String userInput) async {
    final products = await _productService.getActiveProducts();
    final orderResponse = await callGeminiAPI(_getOrderPromptText(userInput, products));
    final cleanOrderJson = _cleanJsonText(orderResponse);
    
    try {
      final data = jsonDecode(cleanOrderJson);
      if (data["success"] != true) {
        return null;
      }
      
      // Match products with available products
      final List<Map<String, dynamic>> processedItems = [];
      for (final item in data["items"]) {
        final productName = item["product_name"];
        final quantity = item["quantity"];
        final unit = item["unit"] ?? "C√°i";
        final matched = item["matched"] ?? false;
        
        Product? matchedProduct;
        // Lu√¥n th·ª±c hi·ªán t√¨m ki·∫øm, b·ªè qua flag "matched" t·ª´ AI v√¨ c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c
          matchedProduct = _findBestProductMatch(productName, products);
        
        processedItems.add({
          "product": matchedProduct,
          "quantity": quantity,
          "original_name": productName,
          "matched": matchedProduct != null && matchedProduct.id.isNotEmpty,
        });
      }
      
      return {
        "success": true,
        "items": processedItems,
        "customer_name": data["customer_name"] ?? "",
        "note": data["note"] ?? "",
      };
    } catch (e) {
      print('Error parsing order data: $e');
      return null;
    }
  }

  Product? _findBestProductMatch(String searchName, List<Product> products) {
    if (searchName.trim().isEmpty) return null;
    
    final searchLower = searchName.toLowerCase().trim();
    print('üîç T√¨m ki·∫øm s·∫£n ph·∫©m: "$searchName" -> "$searchLower"');
    
    // 1. Exact match (kh·ªõp ch√≠nh x√°c)
    for (final product in products) {
      if (product.name.toLowerCase() == searchLower) {
        print('‚úÖ EXACT MATCH: "${product.name}"');
        return product;
      }
    }
    
    // 2. Exact word match (kh·ªõp t·ª´ ch√≠nh x√°c)
    final searchWords = searchLower.split(' ').where((w) => w.length > 2).toList();
    for (final product in products) {
      final productWords = product.name.toLowerCase().split(' ');
      for (final searchWord in searchWords) {
        for (final productWord in productWords) {
          if (searchWord == productWord && searchWord.length >= 3) {
            print('‚úÖ WORD MATCH: "${product.name}" (t·ª´: "$searchWord")');
            return product;
          }
        }
      }
    }
    
    // 3. Product name contains full search (ch·ªâ 1 chi·ªÅu)
    for (final product in products) {
      if (product.name.toLowerCase().contains(searchLower) && searchLower.length >= 3) {
        print('‚úÖ CONTAINS MATCH: "${product.name}" ch·ª©a "$searchLower"');
        return product;
      }
    }
    
    // 4. Strict keyword match (t·∫•t c·∫£ t·ª´ quan tr·ªçng ph·∫£i match)
    if (searchWords.length >= 2) {
    for (final product in products) {
      final productWords = product.name.toLowerCase().split(' ');
        int exactMatches = 0;
        
        for (final searchWord in searchWords) {
          for (final productWord in productWords) {
            if (searchWord == productWord || 
                (searchWord.length >= 4 && productWord.contains(searchWord)) ||
                (productWord.length >= 4 && searchWord.contains(productWord))) {
              exactMatches++;
              break;
            }
          }
        }
        
        // Ph·∫£i match √≠t nh·∫•t 80% v√† t·ªëi thi·ªÉu 2 t·ª´
        if (exactMatches >= 2 && exactMatches >= (searchWords.length * 0.8).ceil()) {
          print('‚úÖ KEYWORD MATCH: "${product.name}" ($exactMatches/${searchWords.length} t·ª´)');
          return product;
        }
      }
    }
    
    print('‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p cho: "$searchName"');
    return null; // Kh√¥ng t√¨m th·∫•y match h·ª£p l·ªá
  }

  // T√¨m kh√°ch h√†ng theo t√™n (fuzzy search)
  Future<Customer> _findCustomerByName(String customerName) async {
    if (customerName.trim().isEmpty) {
      return Customer.walkIn();
    }

    final customers = await _customerService.getActiveCustomers();
    final searchName = customerName.toLowerCase().trim();
    
    // T√¨m kh·ªõp ch√≠nh x√°c
    for (final customer in customers) {
      if (customer.name.toLowerCase() == searchName) {
        return customer;
      }
    }
    
    // T√¨m kh·ªõp m·ªôt ph·∫ßn
    for (final customer in customers) {
      if (customer.name.toLowerCase().contains(searchName) ||
          searchName.contains(customer.name.toLowerCase())) {
        return customer;
      }
    }
    
    // T√¨m theo t·ª´ kh√≥a
    final searchWords = searchName.split(' ');
    for (final customer in customers) {
      final customerWords = customer.name.toLowerCase().split(' ');
      int matchCount = 0;
      for (final word in searchWords) {
        if (customerWords.any((cw) => cw.contains(word) || word.contains(cw))) {
          matchCount++;
        }
      }
      if (matchCount >= searchWords.length ~/ 2) {
        return customer;
      }
    }
    
    // Kh√¥ng t√¨m th·∫•y - tr·∫£ v·ªÅ kh√°ch l·∫ª v·ªõi t√™n g·ª£i √Ω
    return Customer.walkIn().copyWith(name: customerName);
  }

  // T·∫°o ƒë∆°n h√†ng th√¥ng minh t·ª´ d·ªØ li·ªáu AI
  Future<Map<String, dynamic>> createSmartOrder(Map<String, dynamic> orderData) async {
    try {
      final items = orderData["items"] as List<Map<String, dynamic>>? ?? [];
      final customerName = (orderData["customer_name"] as String? ?? "").trim();
      final note = orderData["note"] as String? ?? "";

      // Ki·ªÉm tra c√≥ s·∫£n ph·∫©m kh·ªõp kh√¥ng
      final matchedItems = items.where((item) => item["matched"] == true).toList();
      
      if (matchedItems.isEmpty) {
        return {
          "success": false,
          "reason": "no_products_found",
          "message": "‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p trong kho h√†ng. Vui l√≤ng ki·ªÉm tra t√™n s·∫£n ph·∫©m.",
          "suggested_products": items.map((item) => item["original_name"]).toList(),
        };
      }

      // T√¨m kh√°ch h√†ng
      final customer = await _findCustomerByName(customerName);
      
      // T·∫°o ƒë∆°n h√†ng
      final orderItems = <OrderItem>[]; 
      double totalAmount = 0;
      
      for (final item in matchedItems) {
        final product = item["product"] as Product?; 
        final quantity = item["quantity"] as int? ?? 0;
        
        if (product == null || quantity <= 0) {
          continue; // B·ªè qua item kh√¥ng h·ª£p l·ªá
        }
        
        // Ki·ªÉm tra t·ªìn kho
        if (product.stockQuantity < quantity) {
          return {
            "success": false,
            "reason": "insufficient_stock", 
            "message": "‚ùå S·∫£n ph·∫©m '${product.name}' kh√¥ng ƒë·ªß t·ªìn kho. C√≥ s·∫µn: ${product.stockQuantity}, y√™u c·∫ßu: $quantity",
            "product": product.name,
            "available": product.stockQuantity,
            "requested": quantity,
          };
        }
        
        final itemTotal = quantity * product.sellingPrice;
        totalAmount += itemTotal;
        
        orderItems.add(OrderItem(
          id: '${DateTime.now().millisecondsSinceEpoch}_${product.id}',
          productId: product.id,
          productName: product.name,
          productCode: product.code,
          quantity: quantity,
          unitPrice: product.sellingPrice,
          costPrice: product.costPrice,
          unit: product.unit,
        ));  
      }

      // T·∫°o Order object v·ªõi ƒë√∫ng c·∫•u tr√∫c
      final now = DateTime.now();  
      final orderId = now.millisecondsSinceEpoch.toString();
      final orderNumber = Order.generateOrderNumber(now, 1); // Sequence s·∫Ω ƒë∆∞·ª£c t√≠nh l·∫°i trong OrderService

      final order = Order(
        id: orderId,
        orderNumber: orderNumber,
        orderDate: now,
        status: OrderStatus.paid, // ƒê∆°n h√†ng AI t·ª± ƒë·ªông ƒë√£ thanh to√°n
        items: orderItems,
        customer: customer,
        note: note,
        createdAt: now,
        updatedAt: now,
      );

      // L∆∞u ƒë∆°n h√†ng
      await _orderService.addOrder(order);

      return {
        "success": true,
        "order": order,
        "message": "‚úÖ ƒê√£ t·∫°o ƒë∆°n h√†ng th√†nh c√¥ng!",
        "customer_info": customer.isWalkIn ? "Kh√°ch l·∫ª" : customer.name,
        "total_amount": order.total,
        "item_count": orderItems.length,
      };

    } catch (e) {
      return {
        "success": false,
        "reason": "creation_error",
        "message": "‚ùå L·ªói khi t·∫°o ƒë∆°n h√†ng: $e",
        "error": e.toString(),
      };
    }
  }

  // Xem tr∆∞·ªõc ƒë∆°n h√†ng v√† chu·∫©n b·ªã th√¥ng tin ƒë·ªÉ h·ªèi ng∆∞·ªùi d√πng
  Future<Map<String, dynamic>> _previewOrder(Map<String, dynamic> orderData) async {
    try {
      final items = orderData["items"] as List<Map<String, dynamic>>? ?? [];
      final customerName = (orderData["customer_name"] as String? ?? "").trim();
      final note = orderData["note"] as String? ?? "";

      // Ki·ªÉm tra c√≥ s·∫£n ph·∫©m kh·ªõp kh√¥ng
      final matchedItems = items.where((item) => item["matched"] == true).toList();
      final unmatchedItems = items.where((item) => item["matched"] != true).toList();
      
      if (matchedItems.isEmpty) {
        return {
          "success": false,
          "reason": "no_products_found",
          "message": "‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p trong kho h√†ng",
          "suggested_products": items.map((item) => item["original_name"]).toList(),
          "unmatched_items": unmatchedItems,
        };
      }

      // T√¨m kh√°ch h√†ng
      final customer = await _findCustomerByName(customerName);
      
      // Chu·∫©n b·ªã th√¥ng tin ƒë∆°n h√†ng ƒë·ªÉ hi·ªÉn th·ªã
      String itemsPreview = ""; 
      double totalAmount = 0;
      List<Map<String, dynamic>> orderItemsPreview = [];
      List<String> stockIssues = [];
       
      for (final item in matchedItems) {
        final product = item["product"] as Product?;
        final quantity = item["quantity"] as int? ?? 0;
        
        if (product == null || quantity <= 0) {
          continue; // B·ªè qua item kh√¥ng h·ª£p l·ªá
        }
        
        // Ki·ªÉm tra t·ªìn kho
        if (product.stockQuantity < quantity) {
          stockIssues.add("‚ö†Ô∏è ${product.name}: Y√™u c·∫ßu $quantity, c√≥ s·∫µn ${product.stockQuantity}");
        }
        
        final itemTotal = quantity * product.sellingPrice;
        totalAmount += itemTotal;
        
        itemsPreview += "‚úÖ ${product.name}: ${quantity} ${product.unit} √ó ${FormatUtils.formatCurrency(product.sellingPrice)} = ${FormatUtils.formatCurrency(itemTotal)} VNƒê\n";
        
        orderItemsPreview.add({
          "product": product,
          "quantity": quantity,
          "unit_price": product.sellingPrice,
          "line_total": itemTotal,
        });
      }

      // Th√™m th√¥ng tin s·∫£n ph·∫©m kh√¥ng kh·ªõp
      String unmatchedPreview = "";
      if (unmatchedItems.isNotEmpty) {
        unmatchedPreview = "\n‚ùì S·∫£n ph·∫©m kh√¥ng t√¨m th·∫•y:\n";
        for (final item in unmatchedItems) {
          unmatchedPreview += "‚Ä¢ ${item["original_name"]}: ${item["quantity"]}\n";
        }
      }

      return {
        "success": true,
        "customer": customer,
        "customer_info": customer.isWalkIn ? "Kh√°ch l·∫ª" : customer.name,
        "matched_items": matchedItems,
        "unmatched_items": unmatchedItems,
        "order_items_preview": orderItemsPreview,
        "total_amount": totalAmount,
        "items_preview": itemsPreview,
        "unmatched_preview": unmatchedPreview,
        "stock_issues": stockIssues,
        "note": note,
        "has_stock_issues": stockIssues.isNotEmpty,
        "has_unmatched": unmatchedItems.isNotEmpty,
      };

    } catch (e) {
      return {
        "success": false,
        "reason": "preview_error",
        "message": "‚ùå L·ªói khi chu·∫©n b·ªã th√¥ng tin ƒë∆°n h√†ng: $e",
        "error": e.toString(),
      };
    }
  }

  String generateReport(Map<String, dynamic> analysis, List<FinanceRecord> records) {
    final reportType = analysis["report_type"];
    final year = analysis["year"] ?? DateTime.now().year;
    
    List<FinanceRecord> filteredRecords = [];
    
    switch (reportType) {
      case "thang":
        final month = analysis["period"] ?? DateTime.now().month;
        filteredRecords = records.where((record) {
          return record.ngayTao.month == month && record.ngayTao.year == year;
        }).toList();
        break;
      case "quy":
        final quarter = analysis["period"] ?? ((DateTime.now().month - 1) ~/ 3) + 1;
        final startMonth = (quarter - 1) * 3 + 1;
        final endMonth = quarter * 3;
        filteredRecords = records.where((record) {
          return record.ngayTao.month >= startMonth &&
              record.ngayTao.month <= endMonth &&
              record.ngayTao.year == year;
        }).toList();
        break;
      case "nam":
        filteredRecords = records.where((record) {
          return record.ngayTao.year == year;
        }).toList();
        break;
      case "ngay":
        final date = DateTime.parse(analysis["date"]);
        filteredRecords = records.where((record) {
          return record.ngayTao.year == date.year &&
              record.ngayTao.month == date.month &&
              record.ngayTao.day == date.day;
        }).toList();
        break;
    }

    double totalRevenue = filteredRecords.fold(0, (sum, record) => sum + record.doanhThu);
    double totalCost = filteredRecords.fold(0, (sum, record) => sum + record.chiPhi);
    double totalProfit = totalRevenue - totalCost;

    String reportTitle = "";
    switch (reportType) {
      case "thang":
        reportTitle = "B√°o c√°o th√°ng ${analysis["period"]}/$year";
        break;
      case "quy":
        reportTitle = "B√°o c√°o qu√Ω ${analysis["period"]}/$year";
        break;
      case "nam":
        reportTitle = "B√°o c√°o nƒÉm $year";
        break;
      case "ngay":
        reportTitle = "B√°o c√°o ng√†y ${analysis["date"]}";
        break;
    }

    return '''$reportTitle
ÔøΩÔøΩ T·ªïng doanh thu: ${FormatUtils.formatCurrency(totalRevenue)} VNƒê
üí∏ T·ªïng chi ph√≠: ${FormatUtils.formatCurrency(totalCost)} VNƒê
üìä L·ª£i nhu·∫≠n: ${FormatUtils.formatCurrency(totalProfit)} VNƒê
üìà S·ªë giao d·ªãch: ${filteredRecords.length} 
${totalRevenue > 0 ? 'üìã T·ª∑ l·ªá l·ª£i nhu·∫≠n: ${(totalProfit / totalRevenue * 100).toStringAsFixed(2)}%' : ''}''';
  }

  // T·∫°o metadata cho popup x√°c nh·∫≠n ƒë∆°n h√†ng  
  Map<String, dynamic> createOrderConfirmationDialog(Map<String, dynamic> previewData) {
    final customerInfo = previewData["customer_info"] as String? ?? "Kh√°ch l·∫ª";
    final totalAmount = previewData["total_amount"] as double? ?? 0.0;
    final itemsPreview = previewData["items_preview"] as String? ?? "";
    final unmatchedPreview = previewData["unmatched_preview"] as String? ?? "";
    final stockIssues = previewData["stock_issues"] as List<String>? ?? [];
    final hasStockIssues = previewData["has_stock_issues"] as bool? ?? false;
    final hasUnmatched = previewData["has_unmatched"] as bool? ?? false;
    final note = previewData["note"] as String? ?? "";
    
    String dialogContent = '''üõí X√°c nh·∫≠n t·∫°o ƒë∆°n h√†ng:
üë§ Kh√°ch h√†ng: $customerInfo
$itemsPreview${unmatchedPreview}
üí∞ T·ªïng ti·ªÅn: ${FormatUtils.formatCurrency(totalAmount)} VNƒê${note.isNotEmpty ? '\nüìù Ghi ch√∫: $note' : ''}''';

    // Th√™m c·∫£nh b√°o n·∫øu c√≥
    if (hasStockIssues) {
      dialogContent += "\n\n‚ö†Ô∏è V·∫•n ƒë·ªÅ t·ªìn kho:\n";
      for (final issue in stockIssues) {
        dialogContent += "$issue\n";
      }
    }

    if (hasUnmatched) {
      dialogContent += "\n‚ö†Ô∏è M·ªôt s·ªë s·∫£n ph·∫©m kh√¥ng t√¨m th·∫•y trong kho.";
    }
    
    return {
      "show_dialog": true,
      "dialog_type": "order_confirmation",
      "title": "X√°c nh·∫≠n ƒë∆°n h√†ng",
      "content": dialogContent,
      "preview_data": previewData,
      "has_issues": hasStockIssues || hasUnmatched,
      "positive_button": "T·∫°o ƒë∆°n h√†ng",
      "negative_button": "H·ªßy",
    };
  }

  // X·ª≠ l√Ω x√°c nh·∫≠n t·∫°o ƒë∆°n h√†ng t·ª´ ng∆∞·ªùi d√πng
  Future<Map<String, dynamic>> confirmOrderCreation(Map<String, dynamic> previewData) async {
    try {
      final items = previewData["matched_items"] as List<Map<String, dynamic>>? ?? [];
      final customer = previewData["customer"] as Customer? ?? Customer.walkIn();
      final note = previewData["note"] as String? ?? "";

      // T·∫°o ƒë∆°n h√†ng
      final orderItems = <OrderItem>[];
      double totalAmount = 0;
      
      for (final item in items) {
        final product = item["product"] as Product?;
        final quantity = item["quantity"] as int? ?? 0;
        
        if (product == null || quantity <= 0) {
          continue; // B·ªè qua item kh√¥ng h·ª£p l·ªá
        }
        
        // Ki·ªÉm tra l·∫°i t·ªìn kho (c√≥ th·ªÉ ƒë√£ thay ƒë·ªïi)
        if (product.stockQuantity < quantity) {
          return {
            "success": false,
            "reason": "insufficient_stock_changed", 
            "message": "‚ùå T·ªìn kho s·∫£n ph·∫©m '${product.name}' ƒë√£ thay ƒë·ªïi. C√≥ s·∫µn: ${product.stockQuantity}, y√™u c·∫ßu: $quantity",
            "product": product.name,
            "available": product.stockQuantity,
            "requested": quantity,
          };
        }
        
        final itemTotal = quantity * product.sellingPrice;
        totalAmount += itemTotal;
        
        orderItems.add(OrderItem(
          id: '${DateTime.now().millisecondsSinceEpoch}_${product.id}',
          productId: product.id,
          productName: product.name,
          productCode: product.code,
          quantity: quantity,
          unitPrice: product.sellingPrice,
          costPrice: product.costPrice,
          unit: product.unit,
        ));
      }

      // T·∫°o Order object
      final now = DateTime.now();
      final orderId = now.millisecondsSinceEpoch.toString();
      final orderNumber = Order.generateOrderNumber(now, 1);
      
      final order = Order(
        id: orderId,
        orderNumber: orderNumber,
        orderDate: now,
        status: OrderStatus.paid,
        items: orderItems,
        customer: customer,
        note: note,
        createdAt: now,
        updatedAt: now,
      );

      // L∆∞u ƒë∆°n h√†ng
      await _orderService.addOrder(order);

      return {
        "success": true,
        "order": order,
        "message": "‚úÖ ƒê√£ t·∫°o ƒë∆°n h√†ng th√†nh c√¥ng!",
        "customer_info": customer.isWalkIn ? "Kh√°ch l·∫ª" : customer.name,
        "total_amount": order.total,
        "item_count": orderItems.length,
      };

    } catch (e) {
      return {
        "success": false,
        "reason": "creation_error",
        "message": "‚ùå L·ªói khi t·∫°o ƒë∆°n h√†ng: $e",
        "error": e.toString(),
      };
    }
  }

  // X√≥a method x·ª≠ l√Ω x√°c nh·∫≠n qua tin nh·∫Øn - gi·ªù d√πng popup

  // X·ª≠ l√Ω tin nh·∫Øn v√† l∆∞u l·ªãch s·ª≠
  Future<ChatMessage> processMessage(String userMessage, List<FinanceRecord> records) async {
    // L∆∞u tin nh·∫Øn c·ªßa user
    final userChatMessage = ChatMessage(
      text: userMessage,
      isUser: true,
      type: 'user_input',
    );
    await _storageManager.addChatMessage(userChatMessage);

    try {
            // B·ªè logic x·ª≠ l√Ω x√°c nh·∫≠n qua tin nh·∫Øn - gi·ªù d√πng popup

      // X·ª≠ l√Ω b√¨nh th∆∞·ªùng n·∫øu kh√¥ng ph·∫£i x√°c nh·∫≠n ƒë∆°n h√†ng
      final analysis = await analyzeUserInput(userMessage);
      String aiResponse = "";
      String messageType = "general";
      Map<String, dynamic>? metadata;

      if (analysis["type_input"] == "entry") {
        // X·ª≠ l√Ω nh·∫≠p li·ªáu
        final record = await extractFinanceData(userMessage);
        messageType = "entry";
        
        if (record == null) {
          aiResponse = "D·ªØ li·ªáu kh√¥ng li√™n quan ƒë·∫øn t√†i ch√≠nh. Vui l√≤ng nh·∫≠p th√¥ng tin v·ªÅ doanh thu v√† chi ph√≠.";
          metadata = {"success": false, "reason": "invalid_data"};
        } else {
          aiResponse = '''üìù D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω:
üí∞ Doanh thu: ${FormatUtils.formatCurrency(record.doanhThu)} VNƒê
üí∏ Chi ph√≠: ${FormatUtils.formatCurrency(record.chiPhi)} VNƒê
üìä L·ª£i nhu·∫≠n: ${FormatUtils.formatCurrency(record.loiNhuan)} VNƒê
üìÖ Ng√†y: ${FormatUtils.formatSimpleDate(record.ngayTao)}
‚úèÔ∏è Ghi ch√∫: ${record.ghiChu}
          ''';
          metadata = {
            "success": true,
            "record": record.toJson(),
            "revenue": record.doanhThu,
            "cost": record.chiPhi,
            "profit": record.loiNhuan,
          };
        }
      } else if (analysis["type_input"] == "order") {
        // X·ª≠ l√Ω ƒë∆°n h√†ng th√¥ng minh
        final orderData = await extractOrderData(userMessage);
        messageType = "order";
        
        if (orderData == null || orderData["success"] != true) {
          aiResponse = "‚ùå Kh√¥ng th·ªÉ tr√≠ch xu·∫•t th√¥ng tin ƒë∆°n h√†ng. Vui l√≤ng m√¥ t·∫£ r√µ s·∫£n ph·∫©m v√† s·ªë l∆∞·ª£ng.";
          metadata = {"success": false, "reason": "invalid_order_data"};
        } else {
          // Chu·∫©n b·ªã th√¥ng tin ƒë∆°n h√†ng v√† h·ªèi √Ω ki·∫øn ng∆∞·ªùi d√πng
          final previewResult = await _previewOrder(orderData);
          
                    if (previewResult["success"] == true) {
            // T·∫°o dialog x√°c nh·∫≠n thay v√¨ y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p tin nh·∫Øn
            final dialogData = createOrderConfirmationDialog(previewResult);
            
            aiResponse = "üîç ƒê√£ ph√¢n t√≠ch ƒë∆°n h√†ng th√†nh c√¥ng!\nüì± Vui l√≤ng xem popup x√°c nh·∫≠n ƒë·ªÉ ti·∫øp t·ª•c.";
            
            metadata = {
              "success": true,
              "order_preview": true,
              "preview_data": previewResult,
              "total_amount": previewResult["total_amount"],
              "customer_type": (previewResult["customer"] as Customer?)?.isWalkIn == true ? "walk_in" : "registered",
              "has_issues": previewResult["has_issues"] ?? false,
              "dialog_data": dialogData,
            };
            } else {
            // Kh√¥ng th·ªÉ t·∫°o preview ƒë∆°n h√†ng
            aiResponse = previewResult["message"] as String? ?? "L·ªói x·ª≠ l√Ω ƒë∆°n h√†ng";
            
            // Th√™m th√¥ng tin chi ti·∫øt d·ª±a v√†o l√Ω do l·ªói
            final reason = previewResult["reason"] as String? ?? "unknown_error";
            if (reason == "no_products_found") {
              final suggestedProducts = previewResult["suggested_products"] as List<dynamic>? ?? [];
              aiResponse += "\n\nüîç S·∫£n ph·∫©m b·∫°n ƒë·ªÅ c·∫≠p:\n";
              for (final product in suggestedProducts) {
                aiResponse += "‚Ä¢ $product\n";
              }
              aiResponse += "\nüí° Vui l√≤ng ki·ªÉm tra danh s√°ch s·∫£n ph·∫©m c√≥ s·∫µn ho·∫∑c th√™m s·∫£n ph·∫©m m·ªõi v√†o kho.";
            }
          
          metadata = {
              "success": false,
              "reason": reason,
              "order_preview": false,
            };
          }
        }
      } else if (analysis["type_input"] == "report") {
        // X·ª≠ l√Ω b√°o c√°o
        messageType = "report";
        aiResponse = generateReport(analysis, records);
        metadata = {
          "report_type": analysis["report_type"],
          "period": analysis["period"],
          "year": analysis["year"],
          "date": analysis["date"],
        };
      } else {
        // X·ª≠ l√Ω c√¢u h·ªèi chung
        messageType = "search";
        final generalResponse = await callGeminiAPI("$userMessage Gi·∫£i th√≠ch ng·∫Øn g·ªçn v·ªÅ k·∫ø to√°n v√† t√†i ch√≠nh");
        aiResponse = generalResponse;
        metadata = {"query": userMessage};
      }

      // T·∫°o v√† l∆∞u tin nh·∫Øn ph·∫£n h·ªìi c·ªßa AI
      final aiChatMessage = ChatMessage(
        text: aiResponse,
        isUser: false,
        type: messageType,
        metadata: metadata,
      );
      await _storageManager.addChatMessage(aiChatMessage);

      return aiChatMessage;
    } catch (e) {
      final errorMessage = ChatMessage(
        text: "L·ªói khi x·ª≠ l√Ω: $e",
        isUser: false,
        type: "error",
        metadata: {"error": e.toString()},
      );
              await _storageManager.addChatMessage(errorMessage);
      return errorMessage;
    }
  } 

  // Method public ƒë·ªÉ UI g·ªçi khi ng∆∞·ªùi d√πng x√°c nh·∫≠n t·ª´ popup
  Future<ChatMessage> handleOrderConfirmation(bool confirmed, Map<String, dynamic> previewData) async {
    String aiResponse = "";
    Map<String, dynamic>? metadata; 
     
    if (confirmed) {
      // Ng∆∞·ªùi d√πng ƒë·ªìng √Ω t·∫°o ƒë∆°n h√†ng
      final confirmResult = await confirmOrderCreation(previewData);
      
      if (confirmResult["success"] == true) {
        final order = confirmResult["order"] as Order?;
        final customerInfo = confirmResult["customer_info"] as String? ?? "Kh√°ch l·∫ª";
        final totalAmount = confirmResult["total_amount"] as double? ?? 0.0;
        final itemCount = confirmResult["item_count"] as int? ?? 0;
        
        if (order == null) {
          throw Exception("L·ªói: Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng");
        }
        
        String itemsText = "";
        for (final item in order.items) {
          final lineTotal = item.quantity * item.unitPrice;
          itemsText += "‚úÖ ${item.productName}: ${item.quantity} ${item.unit} √ó ${FormatUtils.formatCurrency(item.unitPrice)} = ${FormatUtils.formatCurrency(lineTotal)} VNƒê\n";
        }
        
        aiResponse = '''üéâ ƒê√£ t·∫°o ƒë∆°n h√†ng th√†nh c√¥ng!
üÜî M√£ ƒë∆°n: ${order.orderNumber}
üë§ Kh√°ch h√†ng: $customerInfo
$itemsText
üí∞ T·ªïng ti·ªÅn: ${FormatUtils.formatCurrency(totalAmount)} VNƒê
üì¶ S·ªë s·∫£n ph·∫©m: $itemCount
üìÖ Th·ªùi gian: ${FormatUtils.formatSimpleDate(order.createdAt)}
${order.note.isNotEmpty ? 'üìù Ghi ch√∫: ${order.note}\n' : ''}
‚ú® ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o h·ªá th·ªëng v√† t·ªìn kho ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!''';
        
        metadata = {
          "success": true,
          "order_created": true,
          "order_id": order.id,
          "order_number": order.orderNumber,
          "total_amount": totalAmount,
          "item_count": itemCount,
        };
      } else {
        aiResponse = confirmResult["message"] as String? ?? "L·ªói kh√¥ng x√°c ƒë·ªãnh";
        metadata = {
          "success": false,
          "reason": confirmResult["reason"] ?? "unknown_error",
          "order_created": false,
        };
      }
    } else {
      // Ng∆∞·ªùi d√πng t·ª´ ch·ªëi t·∫°o ƒë∆°n h√†ng
      aiResponse = "‚ùå ƒê√£ h·ªßy t·∫°o ƒë∆°n h√†ng theo y√™u c·∫ßu c·ªßa b·∫°n.\nüí° B·∫°n c√≥ th·ªÉ m√¥ t·∫£ l·∫°i ƒë∆°n h√†ng kh√°c n·∫øu mu·ªën.";
      metadata = {
        "success": false,
        "reason": "user_cancelled",
        "order_created": false,
      };
    }
    
    final aiChatMessage = ChatMessage(
      text: aiResponse,
      isUser: false,
      type: "order_confirmation",
      metadata: metadata,
    );
    await _storageManager.addChatMessage(aiChatMessage);
    return aiChatMessage;
  }

  // L·∫•y l·ªãch s·ª≠ chat
  Future<List<ChatMessage>> getChatHistory() async {
    return await _storageManager.getChatHistory();
  }

  // X√≥a l·ªãch s·ª≠ chat
  Future<void> clearChatHistory() async {
    await _storageManager.clearChatHistory();
  }

  // L·∫•y th·ªëng k√™ chat
  Future<Map<String, dynamic>> getChatStatistics() async {
    final chatHistory = await getChatHistory();
    final userMessages = chatHistory.where((msg) => msg.isUser).length;
    final aiMessages = chatHistory.where((msg) => !msg.isUser).length;
    
    // ƒê·∫øm theo lo·∫°i tin nh·∫Øn
    final entryMessages = chatHistory.where((msg) => msg.type == 'entry').length;
    final reportMessages = chatHistory.where((msg) => msg.type == 'report').length;
    final searchMessages = chatHistory.where((msg) => msg.type == 'search').length;
    final errorMessages = chatHistory.where((msg) => msg.type == 'error').length;

    return {
      'totalMessages': chatHistory.length,
      'userMessages': userMessages,
      'aiMessages': aiMessages,
      'entryMessages': entryMessages,
      'reportMessages': reportMessages,
      'searchMessages': searchMessages,
      'errorMessages': errorMessages,
      'lastMessageTime': chatHistory.isNotEmpty ? chatHistory.last.timestamp.toIso8601String() : null,
    };
  }
} 